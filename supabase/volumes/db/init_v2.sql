-- ====================================================================================
-- SCRIPT DE INICIALIZAÇÃO (V2) - SEPARAÇÃO DE CONTACTOS E PERFIS
-- ====================================================================================

-- 1. TIPOS E TABELAS
-- ====================================================================================

-- Apaga as tabelas antigas na ordem correta para evitar erros de dependência
DROP VIEW IF EXISTS public.chats_with_profile;
DROP TABLE IF EXISTS public.order_items;
DROP TABLE IF EXISTS public.orders;
DROP TABLE IF EXISTS public.profiles;
DROP TABLE IF EXISTS public.contacts; -- Apaga a nova tabela se já existir de uma tentativa anterior

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
        CREATE TYPE public.user_role AS ENUM ('admin', 'caixa', 'garcom', 'customer', 'cozinha');
    ELSE
        ALTER TYPE public.user_role ADD VALUE IF NOT EXISTS 'cozinha';
    END IF;
END$$;

-- NOVA Tabela de Contactos (Dados Pessoais)
CREATE TABLE public.contacts (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    full_name TEXT,
    phone TEXT UNIQUE, -- Telefone é único para evitar duplicados
    email TEXT,
    cpf TEXT,
    cep TEXT,
    address TEXT,
    "number" TEXT,
    neighborhood TEXT,
    complement TEXT,
    accepts_communications BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Tabela de Perfis de Utilizadores (Apenas Autenticação e Função)
CREATE TABLE public.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
    contact_id UUID REFERENCES public.contacts(id) ON DELETE SET NULL, -- Ligação opcional a um contacto
    role public.user_role DEFAULT 'customer'::public.user_role NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Tabela de Pedidos (Agora ligada a Contactos)
CREATE TABLE public.orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contact_id UUID REFERENCES public.contacts(id) ON DELETE SET NULL, -- Chave estrangeira para contacts
    total_price NUMERIC NOT NULL,
    status TEXT DEFAULT 'pending'::text,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    delivery_type TEXT DEFAULT 'delivery'::text,
    payment_method TEXT,
    change_for TEXT,
    payment_status TEXT DEFAULT 'pending'::text,
    in_person_identifier TEXT
);

-- Tabela de Itens do Pedido (sem alterações)
CREATE TABLE public.order_items (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    order_id BIGINT REFERENCES public.orders(id) ON DELETE CASCADE NOT NULL,
    product_id BIGINT REFERENCES public.products(id) ON DELETE SET NULL,
    quantity INTEGER NOT NULL,
    price NUMERIC NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- 2. FUNÇÕES E TRIGGERS
-- ====================================================================================

-- Função para criar um perfil automaticamente após o registo de um novo utilizador
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  new_contact_id UUID;
BEGIN
    -- Cria um contacto correspondente ao novo utilizador
    INSERT INTO public.contacts (id, full_name, email, phone)
    VALUES (gen_random_uuid(), new.raw_user_meta_data->>'full_name', new.email, new.phone)
    RETURNING id INTO new_contact_id;
    
    -- Cria o perfil de autenticação e liga-o ao novo contacto
    INSERT INTO public.profiles (id, role, contact_id)
    VALUES (new.id, (new.raw_user_meta_data->>'role')::public.user_role, new_contact_id);
    
    RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger para executar a função acima
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 3. HABILITAÇÃO DO RLS
-- ====================================================================================
ALTER TABLE public.contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;
-- (As outras tabelas já devem ter RLS ativado, mas podemos garantir)
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.store_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.promotions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.whatsapp_chats ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.whatsapp_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.whatsapp_settings ENABLE ROW LEVEL SECURITY;


-- 4. POLÍTICAS DE SEGURANÇA (POLICIES)
-- ====================================================================================

-- Policies para 'contacts'
CREATE POLICY "Admins can manage contacts" ON public.contacts FOR ALL USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'::public.user_role );
CREATE POLICY "Users can view their own contact info" ON public.contacts FOR SELECT USING ( id = (SELECT contact_id FROM public.profiles WHERE id = auth.uid()) );
CREATE POLICY "Users can update their own contact info" ON public.contacts FOR UPDATE USING ( id = (SELECT contact_id FROM public.profiles WHERE id = auth.uid()) );

-- Policies para 'profiles'
CREATE POLICY "Users can view their own profile" ON public.profiles FOR SELECT USING ( auth.uid() = id );
CREATE POLICY "Admins can view all profiles" ON public.profiles FOR SELECT USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'::public.user_role );

-- Policies para 'orders'
CREATE POLICY "Users can manage their own orders" ON public.orders FOR ALL USING ( contact_id = (SELECT contact_id FROM public.profiles WHERE id = auth.uid()) );
CREATE POLICY "Staff can view all orders" ON public.orders FOR SELECT USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin'::public.user_role, 'caixa'::public.user_role, 'cozinha'::public.user_role) );
CREATE POLICY "Staff can update orders" ON public.orders FOR UPDATE USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin'::public.user_role, 'caixa'::public.user_role, 'cozinha'::public.user_role) );

-- Policies para 'order_items'
CREATE POLICY "Users can manage their own order items" ON public.order_items FOR ALL USING (
    order_id IN (SELECT id FROM public.orders WHERE contact_id = (SELECT contact_id FROM public.profiles WHERE id = auth.uid()))
);
CREATE POLICY "Staff can view all order items" ON public.order_items FOR SELECT USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin'::public.user_role, 'caixa'::public.user_role, 'cozinha'::public.user_role) );

-- Adicionar as outras políticas que já existiam
CREATE POLICY "Public can read products" ON public.products FOR SELECT USING (true);
CREATE POLICY "Public can read categories" ON public.categories FOR SELECT USING (true);
CREATE POLICY "Admins can manage products" ON public.products FOR ALL USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'::public.user_role );
CREATE POLICY "Admins can manage categories" ON public.categories FOR ALL USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'::public.user_role );
CREATE POLICY "Public can read store settings" ON public.store_settings FOR SELECT USING (true);
CREATE POLICY "Admins can update store settings" ON public.store_settings FOR UPDATE USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'::public.user_role );
CREATE POLICY "Public can read active promotions" ON public.promotions FOR SELECT USING (is_active = true);
CREATE POLICY "Admins can manage promotions" ON public.promotions FOR ALL USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'::public.user_role );
CREATE POLICY "Allow admin access to chats" ON public.whatsapp_chats FOR ALL USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'::public.user_role );
CREATE POLICY "Allow admin access to messages" ON public.whatsapp_messages FOR ALL USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'::public.user_role );
CREATE POLICY "Allow admin access to whatsapp settings" ON public.whatsapp_settings FOR ALL USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'::public.user_role );


-- 5. VIEW PARA O CHAT
-- ====================================================================================
CREATE OR REPLACE VIEW public.chats_with_profile AS
SELECT
    wc.id,
    -- Usa o nome do contacto se existir, senão usa o nome do chat (do WhatsApp)
    COALESCE(c.full_name, wc.name) AS display_name,
    wc.last_message_timestamp,
    wc.status,
    wc.created_at
FROM
    public.whatsapp_chats wc
LEFT JOIN
    -- Faz a ligação pelo número de telefone
    public.contacts c ON (regexp_replace(wc.id, '[^0-9]', '', 'g')) = c.phone;
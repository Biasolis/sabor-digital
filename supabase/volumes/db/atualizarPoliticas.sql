-- ====================================================================================
-- SCRIPT DE INICIALIZAÇÃO COMPLETO DO BANCO DE DADOS (V4 - CORREÇÃO POLÍTICA INSERT)
-- Este arquivo contém toda a estrutura, tabelas, funções e políticas de segurança.
-- ====================================================================================

-- 1. CRIAÇÃO DE TIPOS E TABELAS
-- ====================================================================================
DROP VIEW IF EXISTS public.chats_with_profile;
DROP TABLE IF EXISTS public.order_items;
DROP TABLE IF EXISTS public.orders;
DROP TABLE IF EXISTS public.profiles;
DROP TABLE IF EXISTS public.contacts;
DROP TABLE IF EXISTS public.products;
DROP TABLE IF EXISTS public.categories;
DROP TABLE IF EXISTS public.store_settings;
DROP TABLE IF EXISTS public.promotions;
DROP TABLE IF EXISTS public.whatsapp_connections;
DROP TABLE IF EXISTS public.whatsapp_chats;
DROP TABLE IF EXISTS public.whatsapp_messages;
DROP TABLE IF EXISTS public.whatsapp_settings;
DROP TYPE IF EXISTS public.user_role;
DROP FUNCTION IF EXISTS public.handle_new_user;
DROP FUNCTION IF EXISTS public.get_my_role;


CREATE TYPE public.user_role AS ENUM ('admin', 'caixa', 'garcom', 'customer', 'cozinha');

CREATE TABLE public.categories ( id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT NOT NULL, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL );
CREATE TABLE public.products ( id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT NOT NULL, description TEXT, price NUMERIC NOT NULL, image_url TEXT, category_id BIGINT REFERENCES public.categories(id) ON DELETE SET NULL, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL, is_on_sale BOOLEAN DEFAULT false, sale_price NUMERIC );
CREATE TABLE public.contacts ( id UUID DEFAULT gen_random_uuid() PRIMARY KEY, full_name TEXT, phone TEXT UNIQUE, email TEXT, cpf TEXT, cep TEXT, address TEXT, "number" TEXT, neighborhood TEXT, complement TEXT, accepts_communications BOOLEAN DEFAULT false, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL );
CREATE TABLE public.profiles ( id UUID PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE, contact_id UUID REFERENCES public.contacts(id) ON DELETE SET NULL, role public.user_role DEFAULT 'customer'::public.user_role NOT NULL, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL );
CREATE TABLE public.orders ( id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, user_id UUID REFERENCES auth.users(id), contact_id UUID REFERENCES public.contacts(id) ON DELETE SET NULL, total_price NUMERIC NOT NULL, status TEXT DEFAULT 'pending'::text, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL, delivery_type TEXT DEFAULT 'delivery'::text, payment_method TEXT, change_for TEXT, payment_status TEXT DEFAULT 'pending'::text, in_person_identifier TEXT );
CREATE TABLE public.order_items ( id UUID DEFAULT gen_random_uuid() PRIMARY KEY, order_id BIGINT REFERENCES public.orders(id) ON DELETE CASCADE NOT NULL, product_id BIGINT REFERENCES public.products(id) ON DELETE SET NULL, quantity INTEGER NOT NULL, price NUMERIC NOT NULL, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL );
CREATE TABLE public.store_settings ( id BIGINT PRIMARY KEY, store_name TEXT, store_address TEXT, phone_number TEXT, updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL, delivery_fee NUMERIC DEFAULT 0, delivery_time_estimate TEXT, show_promotions_section BOOLEAN DEFAULT true, logo_url TEXT, primary_color TEXT DEFAULT '#f59e0b', secondary_color TEXT DEFAULT '#4f46e5', whatsapp_instance_name TEXT, whatsapp_status_template TEXT DEFAULT 'Olá {cliente}! O estado do seu pedido #{pedido} foi atualizado para: *{status}*.', whatsapp_promo_template TEXT DEFAULT 'Olá {cliente}! Nova promoção imperdível: *{promocao}* por apenas *{preco_promocional}*! Peça já a sua.', is_open BOOLEAN DEFAULT false, last_opened_at TIMESTAMPTZ, CONSTRAINT singleton_check CHECK (id = 1) );
CREATE TABLE public.promotions ( id UUID DEFAULT gen_random_uuid() PRIMARY KEY, title TEXT, image_url TEXT NOT NULL, is_active BOOLEAN DEFAULT true, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL );
CREATE TABLE public.whatsapp_connections ( id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, session_id TEXT NOT NULL DEFAULT 'default', connection_status TEXT, last_qr TEXT, connected_number TEXT, updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL );
CREATE TABLE public.whatsapp_chats ( id TEXT PRIMARY KEY, name TEXT, unread_count INT DEFAULT 0, last_message_timestamp TIMESTAMP WITH TIME ZONE, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL, status TEXT DEFAULT 'open'::text NOT NULL );
CREATE TABLE public.whatsapp_messages ( id TEXT PRIMARY KEY, chat_id TEXT REFERENCES public.whatsapp_chats(id) ON DELETE CASCADE, sender_id TEXT, message_type TEXT, message_body TEXT, sent_by_us BOOLEAN DEFAULT false, "timestamp" TIMESTAMP WITH TIME ZONE, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL );
CREATE TABLE public.whatsapp_settings ( id BIGINT PRIMARY KEY DEFAULT 1, send_order_updates BOOLEAN DEFAULT true, send_promotions BOOLEAN DEFAULT true, process_group_messages BOOLEAN DEFAULT false, updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL, CONSTRAINT singleton_check CHECK (id = 1) );

-- 2. FUNÇÕES E TRIGGERS
-- ====================================================================================
CREATE OR REPLACE FUNCTION public.handle_new_user() RETURNS TRIGGER AS $$ DECLARE new_contact_id UUID; user_role public.user_role; BEGIN user_role := (new.raw_user_meta_data->>'role')::public.user_role; IF user_role IS NULL THEN user_role := 'customer'; END IF; INSERT INTO public.contacts (full_name, email, phone) VALUES (new.raw_user_meta_data->>'full_name', new.email, new.phone) RETURNING id INTO new_contact_id; INSERT INTO public.profiles (id, role, contact_id) VALUES (new.id, user_role, new_contact_id); RETURN new; END; $$ LANGUAGE plpgsql SECURITY DEFINER;
CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
CREATE OR REPLACE FUNCTION public.get_my_role() RETURNS public.user_role AS $$ BEGIN RETURN (auth.jwt()->>'role')::public.user_role; EXCEPTION WHEN others THEN RETURN 'customer'; END; $$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. HABILITAÇÃO DO RLS
-- ====================================================================================
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.store_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.promotions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.whatsapp_connections ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.whatsapp_chats ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.whatsapp_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.whatsapp_settings ENABLE ROW LEVEL SECURITY;

-- 4. POLÍTICAS DE SEGURANÇA CORRIGIDAS
-- ====================================================================================
CREATE POLICY "Admins can manage contacts" ON public.contacts FOR ALL USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Users can view their own contact info" ON public.contacts FOR SELECT USING ( id = (SELECT contact_id FROM public.profiles WHERE id = auth.uid()) );
CREATE POLICY "Users can update their own contact info" ON public.contacts FOR UPDATE USING ( id = (SELECT contact_id FROM public.profiles WHERE id = auth.uid()) );
CREATE POLICY "Users can view their own profile" ON public.profiles FOR SELECT USING ( auth.uid() = id );
CREATE POLICY "Admins can view all profiles" ON public.profiles FOR SELECT USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Public can read products" ON public.products FOR SELECT USING (true);
CREATE POLICY "Public can read categories" ON public.categories FOR SELECT USING (true);
CREATE POLICY "Admins can manage products" ON public.products FOR ALL USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Admins can manage categories" ON public.categories FOR ALL USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Users can manage their own orders" ON public.orders FOR ALL USING ( contact_id = (SELECT contact_id FROM public.profiles WHERE id = auth.uid()) );
CREATE POLICY "Staff can view all orders" ON public.orders FOR SELECT USING ( public.get_my_role() IN ('admin', 'caixa', 'cozinha') );
CREATE POLICY "Staff can update orders" ON public.orders FOR UPDATE USING ( public.get_my_role() IN ('admin', 'caixa', 'cozinha') );
CREATE POLICY "Users can manage their own order items" ON public.order_items FOR ALL USING ( order_id IN (SELECT id FROM public.orders WHERE contact_id = (SELECT contact_id FROM public.profiles WHERE id = auth.uid())) );
CREATE POLICY "Staff can view all order items" ON public.order_items FOR SELECT USING ( public.get_my_role() IN ('admin', 'caixa', 'cozinha') );
CREATE POLICY "Public can read store settings" ON public.store_settings FOR SELECT USING (true);
CREATE POLICY "Admins can update store settings" ON public.store_settings FOR UPDATE USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Admins can insert store settings" ON public.store_settings FOR INSERT WITH CHECK ( public.get_my_role() = 'admin' ); -- POLÍTICA ADICIONADA
CREATE POLICY "Public can read active promotions" ON public.promotions FOR SELECT USING (is_active = true);
CREATE POLICY "Admins can manage promotions" ON public.promotions FOR ALL USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Allow admin access to connections" ON public.whatsapp_connections FOR ALL USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Allow admin access to chats" ON public.whatsapp_chats FOR ALL USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Allow admin access to messages" ON public.whatsapp_messages FOR ALL USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Allow admin access to whatsapp settings" ON public.whatsapp_settings FOR ALL USING ( public.get_my_role() = 'admin' );

-- 5. STORAGE E POLÍTICAS DE STORAGE
-- ====================================================================================
INSERT INTO storage.buckets (id, name, public) VALUES ('product-images', 'product-images', true) ON CONFLICT (id) DO NOTHING;
INSERT INTO storage.buckets (id, name, public) VALUES ('logos', 'logos', true) ON CONFLICT (id) DO NOTHING;
INSERT INTO storage.buckets (id, name, public) VALUES ('promotion-banners', 'promotion-banners', true) ON CONFLICT (id) DO NOTHING;
CREATE POLICY "Public read access for product images" ON storage.objects FOR SELECT USING ( bucket_id = 'product-images' );
CREATE POLICY "Allow admins to manage product images" ON storage.objects FOR ALL USING ( bucket_id = 'product-images' AND public.get_my_role() = 'admin' );
CREATE POLICY "Public read access for logos" ON storage.objects FOR SELECT USING ( bucket_id = 'logos' );
CREATE POLICY "Allow admins to manage logos" ON storage.objects FOR ALL USING ( bucket_id = 'logos' AND public.get_my_role() = 'admin' );
CREATE POLICY "Public read access for promotion banners" ON storage.objects FOR SELECT USING ( bucket_id = 'promotion-banners' );
CREATE POLICY "Allow admins to manage promotion banners" ON storage.objects FOR ALL USING ( bucket_id = 'promotion-banners' AND public.get_my_role() = 'admin' );

-- 6. DADOS INICIAIS E VIEWS
-- ====================================================================================
INSERT INTO public.store_settings (id, store_name) VALUES (1, 'Sabor Digital') ON CONFLICT (id) DO UPDATE SET store_name = EXCLUDED.store_name;
INSERT INTO public.whatsapp_settings (id, send_order_updates, process_group_messages) VALUES (1, true, false) ON CONFLICT (id) DO NOTHING;
ALTER PUBLICATION supabase_realtime ADD TABLE public.whatsapp_chats;
ALTER PUBLICATION supabase_realtime ADD TABLE public.whatsapp_messages;
CREATE OR REPLACE VIEW public.chats_with_profile AS SELECT wc.id, COALESCE(c.full_name, wc.name) AS display_name, wc.last_message_timestamp, wc.status, wc.created_at FROM public.whatsapp_chats wc LEFT JOIN public.contacts c ON (regexp_replace(wc.id, '[^0-9]', '', 'g')) = c.phone;